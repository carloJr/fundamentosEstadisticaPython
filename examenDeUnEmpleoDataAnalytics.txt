<img src="https://svgshare.com/i/Swt.svg" height=75px>  
#¬°Muchas gracias por postular a Prey!  

Aqu√≠ te dejamos un ejercicio para que demuestres todas tus capacidades a la hora de analizar data üìà. Este cargo no pretende que seas capaz de generar modelos de machine/deep learning, as√≠ que conc√©ntrate √∫nicamente en sacar buenas conclusiones.


Lo que buscamos es alguien que pueda generar hip√≥tesis y testearlas a trav√©s de experimentos. El desarrollo de los mismos ser√° realizado por el equipo de Tecnolog√≠a. Lo que se espera del cargo es que puedas:

- Formular hip√≥tesis (junto con el equipo) ü§ù

- Esclarecer qu√© variable se debe medir y ser capaz de obtenerla dentro de nuestras fuentes de datos ü§î

- Monitorear el movimiento de las variables üîé

- Hacer an√°lisis una vez terminado el experimento üî¨

- Realizar pruebas estad√≠sticas para validar tus conclusiones üë©‚Äçüî¨

- Informar al resto del equipo completo el resultado del an√°lisis de manera did√°ctica üìä

- Repetir üîÅ

Esto es el grueso del trabajo, y como ser√°s parte del equipo de Data-Intelligence, tambi√©n tendr√°s la posibilidad de aportar desde tu conocimiento con ideas, an√°lisis varios, modelos (si es parte de tu √°rea de inter√©s), generaci√≥n de queries para necesidades particulares, y complementar el servicio de data con distintos desarrollos para todo el equipo.

#El ejercicio:

Te entregaremos acceso a una base de datos MySQL con distintas tablas que son una representaci√≥n muy reducida de una de nuestras fuentes de datos. La idea es que la explores y nos entregues la informaci√≥n que logres extraer. Saca conclusiones, grafica y mu√©stranos tus habilidades.

#Instrucciones:

- **Crea una copia de este notebook en tu propio Google Drive y comp√°rtelo a patricio@preyhq.com una vez que termines**
- Utiliza todas las librer√≠as que encuentres pertinentes
- Intenta no salirte del notebook (ni utilizar herramientas externas). Con Python y sus librer√≠as es m√°s que suficiente. Si aun as√≠ quieres utilizar otras herramientas como PowerBI, Tableau, Data Studio, etc., no hay problema. Puedes adjuntar las im√°genes en una celda, pero realmente no es necesario.

- **¬°No hay restricciones en lo que quieras mostrar! Trata de no romperte la cabeza, solo queremos saber qu√© puedes aportar, conocer m√°s sobre tus capacidades anal√≠ticas, de programaci√≥n y ver qu√© podemos esperar de ti.**

**¬°√âXITO!**




!pip install sqlalchemy
!pip install pymysql


# Si no conoces esta librer√≠a eres libre de utilizar otra para la conexi√≥n
from sqlalchemy import create_engine

engine = create_engine('mysql+pymysql://analyst:^E!i@9DGf5DF@185.21.216.195:31737/db_test')

# Descripci√≥n de base de datos:
Todos los datos han sido generados de manera aleatoria pero manteniendo cierta cercan√≠a (de manera muy simplificada) con la estructura de Prey.

Una cuenta es la entidad mayor que puede tener un cliente, esta cuenta puede tener asociadas una o varias suscripciones, la suscripci√≥n es lo que paga el cliente. Una cuenta tambi√©n puede tener uno o varios usuarios los cuales a su vez pueden tener uno o varios dispositivos asociados. Los dispositivos son los equipos m√≥viles que protegen los clientes.

##Tabla **subscriptions:**

Prey es una empresa SaaS, por lo que nuestro modelo se basa en suscripciones. Esta tabla ejemplifica algunos datos de una suscripci√≥n:

**id:** El id de una suscripci√≥n.

**customer_id:** El id de un usuario.

**plan:** El tipo de plan que podr√≠a comprar un usuario, con su intervalo de pago.

**plan_quantity:** La cantidad de dispositivos que los usuarios est√°n pagando para proteger.


**plan_unit_price:** El valor de un dispositivo en USD.

**plan_amount:** El valor total que paga un cliente por per√≠odo de facturaci√≥n en USD.

**billing_period:** La frecuencia del per√≠odo de pago.

**billing_period_unit:** La unidad del per√≠odo de pago.

**status:** El estado de una suscripci√≥n.

**created_at:** La fecha de creaci√≥n de la suscripci√≥n.

**cancelled_at:** La fecha de cancelaci√≥n de una suscripci√≥n, si es que ya no est√° activa.

**mrr:** El Monthly Recurrent Revenue de una suscripci√≥n (el pago seg√∫n per√≠odo normalizado a meses).


##Tabla **accounts**:

Esta tabla sirve como tabla intermedia para ver el id de una cuenta a trav√©s del id de un cliente.

**account_id:** El id de la cuenta.

**customer_id:** El id de un cliente (asociado a una suscripci√≥n).

##Tabla **users**:

Una cuenta puede tener varios usuarios asociados. Aqu√≠ podemos ver a qu√© pa√≠s pertenece un usuario, cuando fue creado y si est√° activo o no.

**id:** Id del usuario.

**created_at:** Fecha de creaci√≥n del usuario.

**country_name:** Pa√≠s al que pertenece el usuario.

**state:** Estado del usuario.

**account_id:** Id de la cuenta a la que pertenece el usuario.

##Tabla **devices**:

Esta tabla muestra informaci√≥n sobre los dispositivos que una cuenta tiene asociados, esta asociaci√≥n va por usuarios.

**id:** El id del dispositivo.

**user_id:** El id del usuario al que est√° asociado ese dispositivo.

**created_at:** La fecha en la que se asoci√≥ el dispositivo a la cuenta.

**type:** El tipo de dispositivo.

**os:** El sistema operativo del dispositivo.

**state:** El estado en el que se encuentra el dispositivo en relaci√≥n a la cuenta. El estado missing corresponde a dispositivos que se marcaron como perdidos en el software.





# You've got this! üí™

import pandas as pd

query = "select * from accounts;"
df = pd.read_sql(query,engine)

df.head()

